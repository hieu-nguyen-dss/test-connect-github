name: Create Jira PBI for Pull Requests

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
jobs:
  create-jira-issue:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Search for existing Jira PBI
        id: search_issue
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          echo "JIRA_BASE_URL=${JIRA_BASE_URL}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          LIBRARY_NAME=$(echo "${PR_TITLE}" | sed -E 's/.*Bump ([^ ]+) from.*/\1/')

          JQL_QUERY="project=${JIRA_PROJECT_KEY} AND summary~\"[dependency update]: ${LIBRARY_NAME}\""
          ENCODED_JQL=$(echo "${JQL_QUERY}" | jq -sRr @uri)

          EXISTING_ISSUE_KEY=$(curl -s -u "${JIRA_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Content-Type: application/json" \
            "${JIRA_BASE_URL}/rest/api/3/search?jql=${ENCODED_JQL}" | jq -r '.issues[0]?.key // ""')

          {
            echo "EXISTING_ISSUE_KEY=${EXISTING_ISSUE_KEY}"
            echo "LIBRARY_NAME=${LIBRARY_NAME}"
          } >> "${GITHUB_ENV}"

      - name: Create or Update Jira Issue
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          LIBRARY_NAME="${{ env.LIBRARY_NAME }}"
          EXISTING_ISSUE_KEY="${{ env.EXISTING_ISSUE_KEY }}"

          JIRA_DESCRIPTION=$(cat <<EOF
          {
            "type": "doc",
            "version": 1,
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Update ${LIBRARY_NAME} library."
                  }
                ]
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Details: ",
                    "marks": [
                      {
                        "type": "strong"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "text": "${PR_URL}",
                    "marks": [
                      {
                        "type": "link",
                        "attrs": {
                          "href": "${PR_URL}"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          )
          echo "321"
          JIRA_ACCEPTANCE_CRITERIA=$(cat <<EOF
          {
            "type": "doc",
            "version": 1,
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Update abc"
                  }
                ]
              }
            ]
          }
          EOF
          )
          echo "12345"
          PR_SUMMARY="[dependency update] ${LIBRARY_NAME}"
          if [ -n "$EXISTING_ISSUE_KEY" ]; then
            curl -s -X PUT \
              -u "${JIRA_EMAIL}:${JIRA_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "{\"fields\": {\"summary\": \"${PR_SUMMARY}\", \"description\": ${JIRA_DESCRIPTION}, \"customfield_10047\": \"${JIRA_ACCEPTANCE_CRITERIA}\"}}" \
              "${JIRA_BASE_URL}/rest/api/3/issue/${EXISTING_ISSUE_KEY}"
          else
            echo "2222"
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -u "${JIRA_EMAIL}:${JIRA_API_TOKEN}" \
              --data '{
                "fields": {
                  "project": {
                    "key": "'"${JIRA_PROJECT_KEY}"'"
                  },
                  "summary": "'"${PR_SUMMARY}"'",
                  "description": '"${JIRA_DESCRIPTION}"',
                  "issuetype": {
                    "name": "Story"
                  },
                  "customfield_10047": "'"${JIRA_ACCEPTANCE_CRITERIA}"'"
                }
              }' \
              "${JIRA_BASE_URL}/rest/api/3/issue/"
          fi