name: Create Jira PBI for Pull Requests

on:
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    branches:
      - main
permissions:
  contents: read
  pull-requests: read
jobs:
  create-jira-issue:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Search for existing Jira PBI
        id: search_issue
        env:
          JIRA_BASE_URL: ${{ vars.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ vars.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          echo "JIRA_BASE_URL=${JIRA_BASE_URL}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          LIBRARY_NAME=$(echo "${PR_TITLE}" | sed -E 's/.*Bump ([^ ]+) from.*/\1/')

          JQL_QUERY="project=${JIRA_PROJECT_KEY} AND summary~\"[dependency update]: ${LIBRARY_NAME}\""
          ENCODED_JQL=$(echo "${JQL_QUERY}" | jq -sRr @uri)

          # APIコールのエラー処理
          response=$(curl -s -w "%{http_code}" -u "${JIRA_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Content-Type: application/json" \
            "${JIRA_BASE_URL}/rest/api/3/search?jql=${ENCODED_JQL}")
          http_code=${response: -3}
          body=${response:0:${#response}-3}
          if [ "$http_code" -ge 400 ]; then
            echo "::error::Jira API call failed with status $http_code: $body"
            exit 1
          fi

          EXISTING_ISSUE_KEY=$(echo "$body" | jq -r '.issues[0]?.key // ""')

          {
            echo "EXISTING_ISSUE_KEY=${EXISTING_ISSUE_KEY}"
            echo "LIBRARY_NAME=${LIBRARY_NAME}"
          } >> "${GITHUB_ENV}"

      - name: Create or Update Jira Issue
        env:
          JIRA_BASE_URL: ${{ vars.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ vars.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          LIBRARY_NAME="${{ env.LIBRARY_NAME }}"
          EXISTING_ISSUE_KEY="${{ env.EXISTING_ISSUE_KEY }}"

          # Helper functions
          call_jira_api() {
            local method="$1"
            local endpoint="$2"
            local data="$3"
            
            response=$(curl -s -w "%{http_code}" \
              -X "$method" \
              -H "Content-Type: application/json" \
              -u "${JIRA_EMAIL}:${JIRA_API_TOKEN}" \
              --data "$data" \
              "${JIRA_BASE_URL}${endpoint}")
            http_code=${response: -3}
            body=${response:0:${#response}-3}
            if [ "$http_code" -ge 400 ]; then
              echo "::error::Jira API call failed with status $http_code: $body"
              exit 1
            fi
            echo "$body"
          }

          # JSON escaping
          escape_json() {
            jq -n --arg text "$1" '$text'
          }

          description_text="Update ${LIBRARY_NAME} library."
          JIRA_DESCRIPTION=$(jq -n \
            --arg desc "$description_text" \
            --arg url "$PR_URL" \
            '{
             "type": "doc",
             "version": 1,
             "content": [
               {
                 "type": "paragraph",
                 "content": [
                   {
                     "type": "text",
                     "text": $desc
                   }
                 ]
               },
               {
                 "type": "paragraph",
                 "content": [
                   {
                     "type": "text",
                     "text": "Details: ",
                     "marks": [{ "type": "strong" }]
                   },
                   {
                     "type": "text",
                     "text": $url,
                     "marks": [
                       {
                         "type": "link",
                         "attrs": { "href": $url }
                       }
                     ]
                   }
                 ]
               }
             ]
            }')

          JIRA_ACCEPTANCE_CRITERIA=$(jq -n \
            '{
             "type": "doc",
             "version": 1,
             "content": [
               {
                 "type": "paragraph",
                 "content": [
                   {
                     "type": "text",
                     "text": "update abc library"
                   }
                 ]
               }
             ]
            }')

          PR_SUMMARY="[dependency update] ${LIBRARY_NAME}"
          if [ -n "$EXISTING_ISSUE_KEY" ]; then
            update_data=$(jq -n \
              --arg summary "$PR_SUMMARY" \
              --argjson desc "$JIRA_DESCRIPTION" \
              --argjson acc "$JIRA_ACCEPTANCE_CRITERIA" \
              '{"fields": {"summary": $summary, "description": $desc, "customfield_10047": $acc}}')
            call_jira_api "PUT" "/rest/api/3/issue/${EXISTING_ISSUE_KEY}" "$update_data"
          else
            create_data=$(jq -n \
              --arg key "$JIRA_PROJECT_KEY" \
              --arg summary "$PR_SUMMARY" \
              --argjson desc "$JIRA_DESCRIPTION" \
              --argjson acc "$JIRA_ACCEPTANCE_CRITERIA" \
              '{
                "fields": {
                  "project": {
                    "key": $key
                  },
                  "summary": $summary,
                  "description": $desc,
                  "issuetype": {
                    "name": "Story"
                  },
                  "customfield_10047": $acc
                }
              }')
            call_jira_api "POST" "/rest/api/3/issue/" "$create_data"
          fi