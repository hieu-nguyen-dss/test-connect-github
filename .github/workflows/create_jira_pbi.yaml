name: Create Jira PBI for Pull Requests

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
jobs:
  create-jira-issue:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract PR Information
        id: pr_info
        run: |
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "JQL: project=$JIRA_PROJECT_KEY AND summary~\"Bump $LIBRARY_NAME from\"" >> $GITHUB_ENV

      - name: Search for existing Jira PBI
        id: search_issue
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          if [[ "$PR_TITLE" =~ ^Bump[[:space:]]([a-zA-Z0-9_-]+)[[:space:]]from[[:space:]]([0-9]+\.[0-9]+\.[0-9]+)[[:space:]]to[[:space:]]([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            LIBRARY_NAME="${BASH_REMATCH[1]}"
            OLD_VERSION="${BASH_REMATCH[2]}"
            NEW_VERSION="${BASH_REMATCH[3]}"

            JQL_QUERY=$(echo "project=$JIRA_PROJECT_KEY AND summary~\"Bump $LIBRARY_NAME from\"" | jq -sRr @uri)
            EXISTING_ISSUE_KEY=$(curl -s -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
              -H "Content-Type: application/json" \
              "$JIRA_BASE_URL/rest/api/3/search?jql=$JQL_QUERY" | jq -r '.issues[0]?.key // ""')

            echo "EXISTING_ISSUE_KEY: $EXISTING_ISSUE_KEY"
            echo "EXISTING_ISSUE_KEY=$EXISTING_ISSUE_KEY" >> $GITHUB_ENV
            echo "LIBRARY_NAME=$LIBRARY_NAME" >> $GITHUB_ENV
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: Create or Update Jira Issue
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          LIBRARY_NAME="${{ env.LIBRARY_NAME }}"
          OLD_VERSION="${{ env.OLD_VERSION }}"
          NEW_VERSION="${{ env.NEW_VERSION }}"
          EXISTING_ISSUE_KEY="${{ env.EXISTING_ISSUE_KEY }}"

          JIRA_DESCRIPTION=$(cat <<EOF
          {
            "type": "doc",
            "version": 1,
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Updated $LIBRARY_NAME from $OLD_VERSION to $NEW_VERSION."
                  }
                ]
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Details: ",
                    "marks": [
                      {
                        "type": "strong"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "text": "$PR_URL",
                    "marks": [
                      {
                        "type": "link",
                        "attrs": {
                          "href": "$PR_URL"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          )

          if [ -n "$EXISTING_ISSUE_KEY" ]; then
            echo "Updating existing Jira Issue: $EXISTING_ISSUE_KEY"
            UPDATED_TITLE="Bump $LIBRARY_NAME from ${OLD_VERSION} to ${NEW_VERSION}"

            curl -s -X PUT \
              -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{\"fields\": {\"summary\": \"$UPDATED_TITLE\", \"description\": $JIRA_DESCRIPTION}}" \
              "$JIRA_BASE_URL/rest/api/3/issue/$EXISTING_ISSUE_KEY"
          else
            echo "Creating a new Jira Issue"
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
              --data '{
                "fields": {
                  "project": {
                    "key": "'"$JIRA_PROJECT_KEY"'"
                  },
                  "summary": "'"$PR_TITLE"'",
                  "description": '"$JIRA_DESCRIPTION"',
                  "issuetype": {
                    "name": "Story"
                  }
                }
              }' \
              "$JIRA_BASE_URL/rest/api/3/issue/"
          fi